'use strict'
import test from 'ava'
import testmodule from "test-module"
import PrototypeExtension from "../prototype-extension"

test("REVERSED: Can't see extensions added from node_modules", t => {
    t.is(testmodule.isImported, true)
    t.is({}._.__extensions__().TestModule, void 0)
})

test("REVERSED: Can call a node_modules method that uses prototype-extension", t => {
    t.is(testmodule.method(), "TestModule.testMethod")
})

test("REVERSED: Can call a node_modules lambda that uses prototype-extension", t => {
    t.is(testmodule.lambda(), "TestModule.testForLambda")
})

test("REVERSED: Can call a node_modules lambda that uses prototype-extension and calls another lambda added to an extension", t => {
    t.is(testmodule.fullLambda(), "TestModule.lambda")
})

test("REVERSED: Can add same name extension as node_module", t => {
    class TestModule
    {
        static testMethod(self) { return TestModule.name + "." + testMethod.name; }
    }
    Object._.extendWith(TestModule)
    t.is({}._.__extensionmethods__().testMethod, TestModule.testMethod)
})

test("REVERSED: Can't load custom accessor from node_module", t => {
    t.is(testmodule.configAccessor, true)
    t.is(!!{}.$$, false)
})
