{
  "_args": [
    [
      {
        "raw": "git://github.com/magnaar/prototype-extension.git#develop",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "git://github.com/magnaar/prototype-extension.git#develop",
        "spec": "git://github.com/magnaar/prototype-extension.git#develop",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:magnaar/prototype-extension.git#develop",
          "sshUrl": "git+ssh://git@github.com/magnaar/prototype-extension.git#develop",
          "httpsUrl": "git+https://github.com/magnaar/prototype-extension.git#develop",
          "gitUrl": "git://github.com/magnaar/prototype-extension.git#develop",
          "shortcut": "github:magnaar/prototype-extension#develop",
          "directUrl": "https://raw.githubusercontent.com/magnaar/prototype-extension/develop/package.json"
        }
      },
      "D:\\prog\\javascript\\PrototypeExtension\\test\\node_modules\\test-module"
    ]
  ],
  "_from": "git://github.com/magnaar/prototype-extension.git#develop",
  "_id": "prototype-extension@0.1.8",
  "_inCache": true,
  "_location": "/prototype-extension",
  "_phantomChildren": {},
  "_requested": {
    "raw": "git://github.com/magnaar/prototype-extension.git#develop",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "git://github.com/magnaar/prototype-extension.git#develop",
    "spec": "git://github.com/magnaar/prototype-extension.git#develop",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:magnaar/prototype-extension.git#develop",
      "sshUrl": "git+ssh://git@github.com/magnaar/prototype-extension.git#develop",
      "httpsUrl": "git+https://github.com/magnaar/prototype-extension.git#develop",
      "gitUrl": "git://github.com/magnaar/prototype-extension.git#develop",
      "shortcut": "github:magnaar/prototype-extension#develop",
      "directUrl": "https://raw.githubusercontent.com/magnaar/prototype-extension/develop/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git://github.com/magnaar/prototype-extension.git#550678e76ee7a396c7293213f41a29f01450bbef",
  "_shasum": "bd11a327bdf3b436d1a0a58f35f22c74526f8d05",
  "_shrinkwrap": null,
  "_spec": "git://github.com/magnaar/prototype-extension.git#develop",
  "_where": "D:\\prog\\javascript\\PrototypeExtension\\test\\node_modules\\test-module",
  "author": {
    "name": "Magnaar"
  },
  "ava": {
    "files": [
      "test/*.test.js"
    ]
  },
  "bugs": {
    "url": "https://github.com/magnaar/prototype-extension/issues"
  },
  "dependencies": {},
  "description": "Extension method in javascript without polluting prototypes",
  "devDependencies": {
    "ava": "^0.19.1"
  },
  "gitHead": "550678e76ee7a396c7293213f41a29f01450bbef",
  "homepage": "https://github.com/magnaar/prototype-extension#readme",
  "keywords": [
    "prototype",
    "extension",
    "method",
    "extender",
    "primitive",
    "types"
  ],
  "license": "MIT",
  "main": "prototype-extension.js",
  "name": "prototype-extension",
  "optionalDependencies": {},
  "readme": "**prototype-extension** 0.1.7\r\n=================\r\n###_Extension methods brought to javascript_\r\n\r\n\r\n##**How does it work ?**\r\n###I. Create an extension\r\n```\r\n// ./string-extension.js\r\n\r\nmodule.exports = class StringExtension\r\n{\r\n    static toInt(self)\r\n    {\r\n        return +self\r\n    }\r\n}\r\n```\r\n###II. Extend a type with your extension class\r\n```\r\n// ./main.js\r\n\r\nconst PrototypeExtension = require(\"prototype-extension\")\r\nconst StringExtension = require(\"./string-extension\")\r\n\r\nString._.extendWith(StringExtension)\r\n```\r\n\r\n###III. Use your extension method\r\n```\r\n// ./main.js\r\n\r\n/*\r\n * Previous code\r\n */\r\n\r\nconsole.log(typeof \"42\"._.toInt()) // => number\r\n```\r\n\r\n##**See which extensions are accessibles**\r\n```\r\n\"\"._.__extensions__()\r\n// => {\r\n//    StringExtension: Function StringExtension,\r\n//    PrototypeExtension: Function PrototypeExtension\r\n// }\r\n```\r\nThis will show every extensions available for this type (even the inherited ones)\r\n\r\nTo have more information, you call it like this:\r\n```\r\n\"\"._.__extensions__(true) // __extensions__(self, complete=false)\r\n// => {\r\n//    _: {\r\n//      String: { StringExtension: Function StringExtension },\r\n//      Object: { PrototypeExtension: Function PrototypeExtension }\r\n//    }\r\n// }\r\n```\r\nIt will indicate how to access the extensions, on which type the extension came from and all the extensions for the types of the prototype chain.\r\n\r\n##**See which extension methods are accessibles**\r\n```\r\n\"\"._.__extensionmethods__()\r\n// => {\r\n//    toInt: Function toInt\r\n//    extendWith: Function extendWith\r\n//    __extensions__: Function __extensions__\r\n//    __extensionmethods__: Function __extensionmethods__\r\n//    __protochain__: Function __protochain__\r\n//    __protoproperties__: Function __protoproperties__\r\n// }\r\n```\r\nThis will show every extension methods available for this type (even the inherited ones)\r\n\r\nTo have more information, you call it like this:\r\n```\r\n\"\"._.__extensionmethods__(true)\r\n// => {\r\n//    _: {\r\n//      String: {\r\n//          StringExtension: {\r\n//              toInt: Function toInt\r\n//          }\r\n//      },\r\n//      Object: {\r\n//          PrototypeExtension: {\r\n//              extendWith: Function extendWith\r\n//              __extensions__: Function __extensions__\r\n//              __extensionmethods__: Function __extensionmethods__\r\n//              __protochain__: Function __protochain__\r\n//              __protoproperties__: Function __protoproperties__\r\n//          }\r\n//      }\r\n//    }\r\n// }\r\n```\r\n\r\n#**You can't...**\r\n\r\n##**see the extensions added in a node_module**\r\nand a node\\_module can't see your extensions\r\n\r\nYou can't add methods dynamically on your extension after extending your prototype.\r\n```\r\nString._.extendWith(StringExtension)\r\nStringExtension.dynamicMethod = function (self) { return \"dynamicMethod\" }\r\n\"\"._.dynamicMethod() // => Will throw an error\r\n```\r\n\r\n##**add twice the same extension on the same prototype**\r\n```\r\nString._.extendWith(StringExtension)\r\nString._.extendWith(StringExtension) // Will throw an error\r\n```\r\n\r\nBut this will work\r\n```\r\nclass A {}\r\nclass B extends A {}\r\n\r\nclass Extension {}\r\nA._.extendWith(Extension)\r\nB._.extendWith(Extension)\r\n```\r\n\r\n##**add two extension with the same method name on the same prototype**\r\n```\r\nclass A {}\r\n\r\nclass ExtensionHello {\r\n    static method(self) {\r\n        console.log('Hello')\r\n    }\r\n}\r\n\r\nclass ExtensionWorld {\r\n    static method(self) {\r\n        console.log('World')\r\n    }\r\n}\r\n\r\nA._.extendWith(ExtensionHello)\r\nA._.extendWith(ExtensionWorld) // Will throw an error both extensions have a method named \"method\"\r\n```\r\n\r\n###But this\r\n```\r\nclass A {}\r\nclass B extends A {}\r\n\r\nclass ExtensionHello {\r\n    static method(self) {\r\n        console.log('Hello')\r\n    }\r\n}\r\n\r\nclass ExtensionWorld {\r\n    static method(self) {\r\n        console.log('World')\r\n    }\r\n}\r\n\r\nA._.extendWith(ExtensionHello)\r\nB._.extendWith(ExtensionWorld) // Will work\r\n\r\nnew A()._.method() // => 'Hello'\r\nnew B()._.method() // => 'World'\r\n```\r\n\r\n#**Be careful**\r\n```\r\nconst obj = {}\r\nobj._ // or obj.yourAccessor will always be true\r\n\r\n// So you can't expect this to work as usual\r\nobj._ || (obj._ = \"value\")\r\n```\r\n\r\n###but\r\n```\r\nconst obj = {}\r\nobj.hasOwnProperty(\"_\") // => false\r\n\r\nobj._ = \"Hello\"\r\nobj.hasOwnProperty(\"_\") // => true\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/magnaar/prototype-extension.git"
  },
  "scripts": {
    "test": "ava"
  },
  "version": "0.1.8"
}
